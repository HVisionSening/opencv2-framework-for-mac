if(PYTHON_EXECUTABLE_PYTHONORG)
  if(PYTHON_VERSION_STRING_PYTHONORG)
    set(PYTHON_VERSION_MAJOR_MINOR_PYTHONORG "${PYTHON_VERSION_MAJOR_PYTHONORG}.${PYTHON_VERSION_MINOR_PYTHONORG}")
    set(PYTHON_VERSION_FULL_PYTHONORG "${PYTHON_VERSION_STRING_PYTHONORG}")
  else()
    execute_process(COMMAND ${PYTHON_EXECUTABLE_PYTHONORG} --version
      ERROR_VARIABLE PYTHON_VERSION_FULL_PYTHONORG
      ERROR_STRIP_TRAILING_WHITESPACE)

    string(REGEX MATCH "[0-9]+.[0-9]+" PYTHON_VERSION_MAJOR_MINOR_PYTHONORG "${PYTHON_VERSION_FULL_PYTHONORG}")
  endif()

  if("${PYTHON_VERSION_FULL_PYTHONORG}" MATCHES "[0-9]+.[0-9]+.[0-9]+")
    set(PYTHON_VERSION_FULL_PYTHONORG "${CMAKE_MATCH_0}")
  elseif("${PYTHON_VERSION_FULL_PYTHONORG}" MATCHES "[0-9]+.[0-9]+")
    set(PYTHON_VERSION_FULL_PYTHONORG "${CMAKE_MATCH_0}")
  else()
    unset(PYTHON_VERSION_FULL_PYTHONORG)
  endif()

  if(PYTHON_INCLUDE_PATH_PYTHONORG)
    set(PYTHONLIBS_FOUND_PYTHONORG ON)
  endif()

  if(NOT ANDROID AND NOT IOS)
    if(CMAKE_HOST_UNIX)
      execute_process(COMMAND ${PYTHON_EXECUTABLE_PYTHONORG} -c "from distutils.sysconfig import *; print get_python_lib()"
                      RESULT_VARIABLE PYTHON_CVPY_PROCESS_PYTHONORG
                      OUTPUT_VARIABLE PYTHON_STD_PACKAGES_PATH_PYTHONORG
                      OUTPUT_STRIP_TRAILING_WHITESPACE)
      if("${PYTHON_STD_PACKAGES_PATH_PYTHONORG}" MATCHES "site-packages")
        set(_PYTHON_PACKAGES_PATH_PYTHONORG "python${PYTHON_VERSION_MAJOR_MINOR_PYTHONORG}/site-packages")
      else() #debian based assumed, install to the dist-packages.
        set(_PYTHON_PACKAGES_PATH_PYTHONORG "python${PYTHON_VERSION_MAJOR_MINOR_PYTHONORG}/dist-packages")
      endif()
      if(EXISTS "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/${PYTHON_PACKAGES_PATH_PYTHONORG}")
        set(_PYTHON_PACKAGES_PATH_PYTHONORG "lib${LIB_SUFFIX}/${_PYTHON_PACKAGES_PATH_PYTHONORG}")
      else()
        set(_PYTHON_PACKAGES_PATH_PYTHONORG "lib/${_PYTHON_PACKAGES_PATH_PYTHONORG}")
      endif()
    endif()
    SET(PYTHON_PACKAGES_PATH_PYTHONORG "${_PYTHON_PACKAGES_PATH_PYTHONORG}" CACHE PATH "Where to install the python packages.")

    if(NOT PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG)
      # Attempt to discover the NumPy include directory. If this succeeds, then build python API with NumPy
      execute_process(COMMAND ${PYTHON_EXECUTABLE_PYTHONORG} -c "import os; os.environ['DISTUTILS_USE_SDK']='1'; import numpy.distutils; print numpy.distutils.misc_util.get_numpy_include_dirs()[0]"
                      RESULT_VARIABLE PYTHON_NUMPY_PROCESS_PYTHONORG
                      OUTPUT_VARIABLE PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG
                      OUTPUT_STRIP_TRAILING_WHITESPACE)

      if(PYTHON_NUMPY_PROCESS_PYTHONORG EQUAL 0)
        file(TO_CMAKE_PATH "${PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG}" _PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG)
        set(PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG ${_PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG} CACHE PATH "Path to numpy headers")
      endif()
    endif()

    if(PYTHON_NUMPY_INCLUDE_DIR_PYTHONORG)
      set(PYTHON_USE_NUMPY_PYTHONORG TRUE)
      execute_process(COMMAND ${PYTHON_EXECUTABLE_PYTHONORG} -c "import numpy; print numpy.version.version"
                        RESULT_VARIABLE PYTHON_NUMPY_PROCESS_PYTHONORG
                        OUTPUT_VARIABLE PYTHON_NUMPY_VERSION_PYTHONORG
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
    endif()
  endif(NOT ANDROID AND NOT IOS)
endif(PYTHON_EXECUTABLE_PYTHONORG)
